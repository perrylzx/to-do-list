{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/visibilityFilter.js","reducers/index.js","configureStore.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","actions/addTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","actions/fetchTodo.js","actions/toggleTodo.js","components/App.js","index.js"],"names":["initialState","isFetching","todos","state","action","type","id","value","completed","map","todo","updatedTodo","VisibilityFilters","visibilityFilter","filter","combineReducers","loggerMiddleware","createLogger","Link","active","children","onClick","disabled","style","marginLeft","connect","ownProps","dispatch","Footer","FilterLink","input","onSubmit","e","preventDefault","trim","fetch","method","headers","body","JSON","stringify","then","response","json","createdTodo","receiveAddTodo","ref","node","Todo","textDecoration","TodoList","this","props","fetchTodo","toggleTodo","key","React","Component","getVisibleTodos","t","Error","console","log","requestToggleTodo","receiveToggleTodo","App","VisibleTodoList","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","document","getElementById"],"mappings":"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","file":"static/js/main.27021ef0.chunk.js","sourcesContent":["const initialState = {\r\n  isFetching: false,\r\n  todos: []\r\n}\r\n\r\nconst todos = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'REQUEST_ADD_TODO':\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      };\r\n\r\n    case 'RECEIVE_ADD_TODO':\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        todos: [\r\n          ...state.todos,\r\n          {\r\n            id: action.id,\r\n            value: action.value,\r\n            completed: action.completed,\r\n          }\r\n        ]\r\n      };\r\n\r\n    case 'REQUEST_TODOS':\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n      }\r\n\r\n    case 'RECEIVE_TODOS':\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        todos: action.todos\r\n      }\r\n\r\n    case 'REQUEST_TOGGLE_TODO':\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n\r\n    case 'RECEIVE_TOGGLE_TODO':\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        todos: state.todos.map(todo =>\r\n          todo.id === action.updatedTodo.id ? { ...todo, completed: action.updatedTodo.completed } : todo\r\n        )\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default todos\r\n","export const setVisibilityFilter = filter => ({\r\n  type: 'SET_VISIBILITY_FILTER',\r\n  filter\r\n})\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n}\r\n\r\n","import { VisibilityFilters } from '../actions'\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default visibilityFilter","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport visibilityFilter from './visibilityFilter'\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default () => createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst Link = ({ active, children, onClick }) => (\r\n  <button\r\n    onClick={onClick}\r\n    disabled={active}\r\n    style={{\r\n      marginLeft: '4px'\r\n    }}\r\n  >\r\n    {children}\r\n  </button>\r\n)\r\nLink.propTypes = {\r\n  active: PropTypes.bool.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n}\r\nexport default Link","import { connect } from 'react-redux'\r\nimport { setVisibilityFilter } from '../actions'\r\nimport Link from '../components/Link'\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  active: ownProps.filter === state.visibilityFilter\r\n})\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\r\n})\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Link)","import React from 'react'\r\nimport FilterLink from '../containers/FilterLink'\r\nimport { VisibilityFilters } from '../actions'\r\nconst Footer = () => (\r\n  <div>\r\n    <span>Show: </span>\r\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\r\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\r\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\r\n  </div>\r\n)\r\nexport default Footer","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createTodo } from '../actions/addTodo'\r\n\r\nconst RequestAddTodo = ({ dispatch }) => {\r\n  let input\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          if (!input.value.trim()) {\r\n            return;\r\n          }\r\n          dispatch(createTodo(input.value))\r\n          input.value = '';\r\n        }}\r\n      >\r\n        <input ref={node => (input = node)} />\r\n        <button type=\"submit\">Add Todo</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default connect()(RequestAddTodo)\r\n\r\n","const herokuUrl = 'https://powerful-fortress-54332.herokuapp.com'\r\n\r\n// action that stores your add todo input into this value key\r\nexport const requestAddTodo = () => ({\r\n  type: 'REQUEST_ADD_TODO',\r\n});\r\n\r\nexport const receiveAddTodo = (createdTodo) => ({\r\n  type: 'RECEIVE_ADD_TODO',\r\n  id: createdTodo.id,\r\n  value: createdTodo.value,\r\n  completed: createdTodo.completed\r\n})\r\n\r\n// action creator that dispatches requestAddTodo, fetches from backend create api, post request, then jsons it, then dispatches \r\nexport const createTodo = value => {\r\n  return dispatch => {\r\n    dispatch(requestAddTodo())\r\n    return (\r\n      fetch(`${herokuUrl}/create-todo`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ value })\r\n      })\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(createdTodo => {\r\n          return dispatch(receiveAddTodo(createdTodo));\r\n        })\r\n    );\r\n  };\r\n};\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst Todo = ({ onClick, completed, value }) => (\r\n  <li\r\n    onClick={onClick}\r\n    style={{\r\n      textDecoration: completed ? 'line-through' : 'none'\r\n    }}\r\n  >\r\n    {value}\r\n  </li>\r\n)\r\nTodo.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  completed: PropTypes.bool.isRequired,\r\n  value: PropTypes.string.isRequired\r\n}\r\nexport default Todo","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nclass TodoList extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchTodo();\r\n  }\r\n\r\n  render() {\r\n    const { todos, toggleTodo } = this.props\r\n    return (\r\n      <ul>\r\n        {todos.map(todo => (\r\n          <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      completed: PropTypes.bool.isRequired,\r\n      value: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  toggleTodo: PropTypes.func.isRequired\r\n}\r\nexport default TodoList\r\n","import { connect } from 'react-redux'\r\nimport { fetchTodo } from '../actions/fetchTodo'\r\nimport TodoList from '../components/TodoList'\r\nimport { VisibilityFilters } from '../actions'\r\nimport { toggleTodo } from '../actions/toggleTodo'\r\n\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case VisibilityFilters.SHOW_ALL:\r\n      return todos\r\n    case VisibilityFilters.SHOW_COMPLETED:\r\n      return todos.filter(t => t.completed)\r\n    case VisibilityFilters.SHOW_ACTIVE:\r\n      return todos.filter(t => !t.completed)\r\n    default:\r\n      throw new Error('Unknown filter: ' + filter)\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  todos: getVisibleTodos(state.todos.todos, state.visibilityFilter)\r\n})\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchTodo: () => dispatch(fetchTodo()),\r\n    toggleTodo: (id) => dispatch(toggleTodo(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n","const herokuUrl = 'https://powerful-fortress-54332.herokuapp.com'\r\n\r\n// informing the reducer that the request, isfetching to true\r\nexport const requestTodos = () => ({\r\n  type: 'REQUEST_TODOS',\r\n})\r\n// received??\r\nexport const receiveTodos = (todos) => ({\r\n  type: 'RECEIVE_TODOS',\r\n  todos,\r\n})\r\n\r\n// fetching \r\nexport const fetchTodo = () => dispatch => {\r\n  console.log('success')\r\n  dispatch(requestTodos());\r\n  return fetch(`${herokuUrl}/request-todo`)\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(json => dispatch(receiveTodos(json)))\r\n}\r\n","const herokuUrl = 'https://powerful-fortress-54332.herokuapp.com'\r\n\r\nexport const requestToggleTodo = id => ({\r\n  type: 'REQUEST_TOGGLE_TODO',\r\n  id\r\n})\r\n\r\n// TODO = verify if this action works\r\nexport const receiveToggleTodo = updatedTodo => ({\r\n  type: 'RECEIVE_TOGGLE_TODO',\r\n  updatedTodo\r\n})\r\n\r\n\r\n// TODO = verify if this action creator works\r\nexport const toggleTodo = id => {\r\n  return dispatch => {\r\n    dispatch(requestToggleTodo())\r\n    return (\r\n      fetch(`${herokuUrl}/update-todo`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ id })\r\n      })\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(updatedTodo => {\r\n          return dispatch(receiveToggleTodo(updatedTodo))\r\n        })\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport Footer from './Footer'\r\nimport RequestAddTodo from '../containers/AddTodo'\r\nimport VisibleTodoList from '../containers/VisibleTodoList'\r\nconst App = () => (\r\n  <div>\r\n    <RequestAddTodo />\r\n    <VisibleTodoList />\r\n    <Footer />\r\n  </div>\r\n)\r\nexport default App","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport configureStore from './configureStore'\r\nimport App from './components/App';\r\n\r\nconst store = configureStore()\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}